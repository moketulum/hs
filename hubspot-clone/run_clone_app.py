#!/usr/bin/env python3
import shutil
import subprocess
import os
import plistlib
import tempfile
import sys

def create_and_show_unsigned_app():
    """Crea una versi√≥n sin firmas y muestra las opciones"""
    original_app_path = "/Applications/HubSpot.app/Wrapper/HubSpot.app"
    
    print("============================================================")
    print("üöÄ HUBSPOT CLONE - APLICACI√ìN SIN CERTIFICADOS")
    print("============================================================")
    print("üöÄ Creando versi√≥n sin firmas...")

    # Crear directorio temporal
    temp_dir = tempfile.mkdtemp(prefix="hubspot_unsigned_")
    modified_app_path = os.path.join(temp_dir, "HubSpot.app")

    print(f"üìÅ Directorio temporal: {temp_dir}")

    try:
        # Copiar la aplicaci√≥n original
        print("üìã Copiando aplicaci√≥n...")
        shutil.copytree(original_app_path, modified_app_path)
        print("‚úÖ Aplicaci√≥n copiada")

        # Aplicar modificaciones
        print("üîß Aplicando modificaciones...")
        info_plist_path = os.path.join(modified_app_path, "Info.plist")
        
        with open(info_plist_path, 'rb') as fp:
            plist_data = plistlib.load(fp)
        
        # Modificar metadatos
        plist_data['CFBundleDisplayName'] = "HubSpot Sin Certificados"
        plist_data['CFBundleIdentifier'] = "com.hubspot.CRMAppRelease.unsigned"
        plist_data['CFBundleVersion'] = "1.0.0.unsigned"
        plist_data['CFBundleShortVersionString'] = "1.0.0"
        
        with open(info_plist_path, 'wb') as fp:
            plistlib.dump(plist_data, fp)
        
        print("‚úÖ Modificaciones aplicadas:")
        print(f"   - Nombre: {plist_data['CFBundleDisplayName']}")
        print(f"   - Bundle ID: {plist_data['CFBundleIdentifier']}")
        print(f"   - Versi√≥n: {plist_data['CFBundleShortVersionString']}")

        # Eliminar todas las firmas
        print("üö´ Eliminando todas las firmas de c√≥digo...")
        remove_all_signatures(modified_app_path)
        print("‚úÖ Todas las firmas eliminadas")

        return modified_app_path

    except Exception as e:
        print(f"‚ùå Error durante el proceso: {e}")
        return None

def remove_all_signatures(app_path):
    """Elimina todas las firmas de c√≥digo de la aplicaci√≥n"""
    # Eliminar firmas de la aplicaci√≥n principal
    subprocess.run(["codesign", "--remove-signature", app_path], 
                  check=False, capture_output=True)
    
    # Eliminar directorios de firma
    for root, dirs, files in os.walk(app_path):
        if "_CodeSignature" in dirs:
            shutil.rmtree(os.path.join(root, "_CodeSignature"))
        if "CodeResources" in files:
            os.remove(os.path.join(root, "CodeResources"))
    
    # Eliminar firmas de frameworks
    frameworks_path = os.path.join(app_path, "Frameworks")
    if os.path.exists(frameworks_path):
        for framework in os.listdir(frameworks_path):
            if framework.endswith(".framework"):
                framework_path = os.path.join(frameworks_path, framework)
                subprocess.run(["codesign", "--remove-signature", framework_path], 
                              check=False, capture_output=True)

def show_options(modified_app_path):
    """Muestra las opciones disponibles"""
    print("\n" + "="*60)
    print("üí° OPCIONES PARA USAR LA APLICACI√ìN SIN CERTIFICADOS")
    print("="*60)
    
    print("\n1Ô∏è‚É£  HUBSPOT ORIGINAL (Recomendado - Funciona perfectamente):")
    print("   open /Applications/HubSpot.app")
    print("   ‚úÖ Todas las funcionalidades disponibles")
    print("   ‚úÖ Sin modificaciones")
    print("   ‚úÖ Ejecut√°ndose localmente")
    
    print(f"\n2Ô∏è‚É£  APLICACI√ìN SIN CERTIFICADOS CREADA:")
    print(f"   üìÅ Ubicaci√≥n: {modified_app_path}")
    print(f"   üì± Tama√±o: {get_folder_size(modified_app_path)}")
    print("   ‚ö†Ô∏è  Es una aplicaci√≥n iOS, no se puede ejecutar directamente en macOS")
    
    print("\n3Ô∏è‚É£  XCODE SIMULATOR (Para la versi√≥n sin certificados):")
    print("   - Abrir Xcode")
    print("   - Window > Devices and Simulators")
    print("   - Seleccionar un simulador iOS")
    print("   - Arrastrar la app sin certificados al simulador")
    print(f"   - Ruta: {modified_app_path}")
    
    print("\n4Ô∏è‚É£  DISPOSITIVO iOS (Requiere certificado):")
    print("   - Conectar iPhone/iPad")
    print("   - Usar Xcode para instalar la app")
    print("   - Requiere certificado de desarrollador de Apple")
    
    print("\n5Ô∏è‚É£  IMPLEMENTAR TU PROPIA VERSI√ìN:")
    print("   - Usar la documentaci√≥n extra√≠da en documentation/")
    print("   - Crear app nativa para macOS")
    print("   - Implementar funcionalidades paso a paso")
    print("   - Usar los endpoints y esquemas extra√≠dos")
    
    print("\n6Ô∏è‚É£  MODIFICAR RECURSOS (Sin ejecutar):")
    print("   - Editar im√°genes en la app")
    print("   - Modificar textos y configuraciones")
    print("   - Cambiar colores y estilos")
    print("   - Personalizar la interfaz")
    
    print(f"\nüìÅ Directorio temporal: {modified_app_path}")
    print("üí° Puedes inspeccionar y modificar los archivos en esa ubicaci√≥n")

def get_folder_size(folder_path):
    """Calcula el tama√±o de una carpeta"""
    total_size = 0
    for dirpath, dirnames, filenames in os.walk(folder_path):
        for filename in filenames:
            filepath = os.path.join(dirpath, filename)
            if os.path.exists(filepath):
                total_size += os.path.getsize(filepath)
    
    # Convertir a MB
    size_mb = total_size / (1024 * 1024)
    return f"{size_mb:.1f} MB"

def main():
    """Funci√≥n principal"""
    print("üöÄ HUBSPOT CLONE - EJECUTANDO APLICACI√ìN SIN CERTIFICADOS")
    print("============================================================")
    
    # Crear aplicaci√≥n sin firmas
    modified_app_path = create_and_show_unsigned_app()
    
    if not modified_app_path:
        print("‚ùå No se pudo crear la aplicaci√≥n sin firmas")
        return

    print(f"\n‚úÖ ¬°APLICACI√ìN SIN CERTIFICADOS CREADA EXITOSAMENTE!")
    print(f"üìÅ Ubicaci√≥n: {modified_app_path}")
    print(f"üì± Tama√±o: {get_folder_size(modified_app_path)}")
    
    # Mostrar opciones
    show_options(modified_app_path)
    
    # Ejecutar HubSpot original autom√°ticamente
    print("\n" + "="*60)
    print("üöÄ EJECUTANDO HUBSPOT ORIGINAL AUTOM√ÅTICAMENTE...")
    print("="*60)
    
    try:
        print("üéØ Abriendo HubSpot original...")
        subprocess.run(["open", "/Applications/HubSpot.app"], check=True)
        print("‚úÖ ¬°HubSpot original iniciado exitosamente!")
        print("üéâ ¬°La aplicaci√≥n ya est√° funcionando en tu Mac!")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error ejecutando HubSpot original: {e}")
        print("üí° Intenta ejecutar manualmente: open /Applications/HubSpot.app")
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")

if __name__ == "__main__":
    main()
